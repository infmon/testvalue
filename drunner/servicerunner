#!/bin/bash
                                                                                                                                                          
#  ad88888ba                                        88                          88888888ba                                                                  
# d8"     "8b                                       ""                          88      "8b                                                                 
# Y8,                                                                           88      ,8P                                                                 
# `Y8aaaaa,     ,adPPYba,  8b,dPPYba,  8b       d8  88   ,adPPYba,   ,adPPYba,  88aaaaaa8P'  88       88  8b,dPPYba,   8b,dPPYba,    ,adPPYba,  8b,dPPYba,  
#   `"""""8b,  a8P_____88  88P'   "Y8  `8b     d8'  88  a8"     ""  a8P_____88  88""""88'    88       88  88P'   `"8a  88P'   `"8a  a8P_____88  88P'   "Y8  
#         `8b  8PP"""""""  88           `8b   d8'   88  8b          8PP"""""""  88    `8b    88       88  88       88  88       88  8PP"""""""  88          
# Y8a     a8P  "8b,   ,aa  88            `8b,d8'    88  "8a,   ,aa  "8b,   ,aa  88     `8b   "8a,   ,a88  88       88  88       88  "8b,   ,aa  88          
#  "Y88888P"    `"Ybbd8"'  88              "8"      88   `"Ybbd8"'   `"Ybbd8"'  88      `8b   `"YbbdP'Y8  88       88  88       88   `"Ybbd8"'  88          



#------------------------------------------------------------------------------------
# Initialisation of globals.

# bail if we try and use an unset var
set -o nounset

# Determine the current directory. There's stuff in there we want.
MYDIR=$( dirname "$(readlink -f "$0")" )

# read shell includes autogenerated by dRunner for us (it makes them when we're installed).
source "$MYDIR/utils.sh"

# we want to be in the same directory as docker-compose.yml for docker-compose to work nicely.
cd $MYDIR

# Determine dRunner environment for logging options
if [ "${DRUNNER_ENVIRONMENT:-}" == "live" ]; then
   COMPOSEOPTS=("-f" "docker-compose.yml" "-f" "production.yml")
else
   COMPOSEOPTS=("-f" "docker-compose.yml")
fi

#------------------------------------------------------------------------------------
# showhelp - give some info about the service. SERVICENAME and IMAGENAME are provided by variables.sh.

function showhelp {
cat <<EOF >&2
NAME
   ${SERVICENAME}
       
SYNOPSIS
   ${CODE_S}${SERVICENAME} help${CODE_E}
      This help.
   
DESCRIPTION
   Helpers for envtest. Built from ${IMAGENAME}.
   
EOF
}

#------------------------------------------------------------------------------------
# Run a command in a temporary container. 

function dockerrun {
   docker-compose "${COMPOSEOPTS[@]}" -p "${SERVICENAME}" run --rm "envtest" "$@"
}

#------------------------------------------------------------------------------------
# Run a detached command in the container. 

# detached, can't remove.
function serviceStart {
   docker-compose "${COMPOSEOPTS[@]}" -p "${SERVICENAME}" up -d
}

#------------------------------------------------------------------------------------
# Stop the container. 

function serviceStop {
   docker-compose "${COMPOSEOPTS[@]}" -p "${SERVICENAME}" down
}

#------------------------------------------------------------------------------------

# getUSERID IMAGENAME
# get the ID of the user running in a docker container.
function getUSERID {
   if [ -z "$1" ]; then die "getUSERID: requires IMAGENAME passed as first argument."; fi
   USERID=$(docker run --rm -it "${1}" /bin/bash -c "id -u | tr -d '\r\n'")
   GROUPID=$(docker run --rm -it "${1}" /bin/bash -c "id -g | tr -d '\r\n'")
   if [ $? -ne 0 ]; then die "getUSERID: Docker image ${1} does not exist." ; fi
}

#------------------------------------------------------------------------------------
# Load secrets from Vault
function dvaultLoad {
   [ ! -z "${2:-}" ] || die "dvaultLoad: requires PROJECT and VOLUME arguments"
   
   getUSERID "${IMAGENAME}"
   PROJECT="$1"
   SECRET_VOLUME="$(tr -d '/' <<< ${2})"
   
   dvault load "${PROJECT}" "drunner-${SERVICENAME}-${SECRET_VOLUME}" "${USERID}" "${GROUPID}"
}

#------------------------------------------------------------------------------------
# The main function. We can add any commands we'd like here!

function main {
   if [ "$#" -eq 0 ]; then 
      die "servicerunner must have the install argument."
   fi

   COMMAND="${1}" ; shift
   COMMANDOPTS=("-i")

   case "$COMMAND" in 
   
          #--- standard (required) commands
   
         install_end)
            ;;
            
         obliterate_start)
            ;;
                     
         uninstall_start)
            ;;
                     
         backup_start)
            BACKUPPATH="$1"
            ;;
         
         backup_end)
            BACKUPPATH="$1"
            ;;
         
         restore_end)
            RESTOREPATH="$1"
            ;;
         
         help)
            showhelp
            ;;
         
         enter)
            COMMANDOPTS=("-it")
            dockerrun /bin/bash "$@"
            ;;
         
         update_start)
            ;;

         update_end)
            ;;
         
         selftest)
            ;;
            
         #--- custom commands
         configure)
            [ -z "${TEST_VALUE:-}" ] || save_environment "TEST_VALUE" "${TEST_VALUE}"
            ;;

            
         #--- unrecognised commands

         *)
            # For the standard hooks we don't implement we're required to produce
            # no output and set exit code 127 (E_NOTIMPL).
            ! isHook ${COMMAND} || exit 127
            
            showhelp
            die "Unrecognised command ${CODE_S}${COMMAND}${CODE_E}"            
            ;;
   esac
}

#------------------------------------------------------------------------------------

main "$@"
